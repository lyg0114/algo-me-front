name: Node.js CI

on:
  push:
    branches: [ "deploy" ]
  pull_request:
    branches: [ "deploy" ]

jobs:
  build-image:
    name: Build react docker Imange
    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [ 18.15 ]

    steps:
      - uses: actions/checkout@v4

      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node-version }}

      - name: Run install
        uses: borales/actions-yarn@v4
        with:
          cmd: install # will run `yarn install` command

      - name: Build production bundle
        uses: borales/actions-yarn@v4
        with:
          cmd: build # will run `yarn build:prod` command
        env:
          CI: false

      - name: Login to Docker Hub
        uses: docker/login-action@f4ef78c080cd8ba55a85445d5b36e214a81df20a
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

  deploy-docker-image:
    needs: build-image # build-image 작업 이후에 실행
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Build & Deploy
        env:
          PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
          HOSTNAME: ${{secrets.SSH_HOST}}
          USER_NAME: ${{secrets.USER_NAME}}

        run: |
          echo "$PRIVATE_KEY" > private_key && chmod 600 private_key
          ssh -o StrictHostKeyChecking=no -i private_key ${USER_NAME}@${HOSTNAME} '
              # Now we have got the access of EC2 and we will start the deploy .
              echo ACCESS SUCCESS
              ./deploy-api.sh latest-v13  # 도커 테그 버전, 추후 env 로 변경
              '
